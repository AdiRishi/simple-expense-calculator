---
description:
globs:
alwaysApply: false
---
# Component Patterns & UI Guidelines

## UI Component Library
The project uses a custom UI component library built on Radix UI primitives located in [src/components/ui/](mdc:src/components/ui).

### Available Components
- **Button**: [src/components/ui/button.tsx](mdc:src/components/ui/button.tsx) - Multiple variants and sizes
- **Card**: [src/components/ui/card.tsx](mdc:src/components/ui/card.tsx) - Container with header, content, and footer sections
- **Input**: [src/components/ui/input.tsx](mdc:src/components/ui/input.tsx) - Form input with consistent styling
- **Label**: [src/components/ui/label.tsx](mdc:src/components/ui/label.tsx) - Accessible form labels

### Card Component Pattern
Follow the pattern used in [src/components/expense-calculator.tsx](mdc:src/components/expense-calculator.tsx):
```tsx
<Card className="mx-auto w-full max-w-lg">
  <CardHeader>
    <CardTitle className="flex items-center gap-2">
      <Icon className="h-5 w-5" />
      Title Text
    </CardTitle>
    <CardDescription>Description text</CardDescription>
  </CardHeader>
  <CardContent className="space-y-6">
    {/* Main content */}
  </CardContent>
  <CardFooter className="flex flex-col space-y-4 border-t p-6">
    {/* Footer content */}
  </CardFooter>
</Card>
```

### Form Input Pattern
Use this pattern for form inputs with proper labeling and event handling:
```tsx
<div className="space-y-2">
  <Label htmlFor="input-id">Field Label</Label>
  <Input
    id="input-id"
    type="text"
    placeholder="Placeholder text"
    onChange={handleInputChange(setStateFunction)}
    onBlur={handleInputBlur}
  />
</div>
```

### Icon Usage
- Use Lucide React icons consistently
- Common icons: `Calculator`, `Home`, `Info`
- Apply consistent sizing: `h-4 w-4` or `h-5 w-5`
- Position icons with flex layouts and gap spacing

### Layout Patterns
- Use `space-y-*` for vertical spacing between elements
- Use `gap-*` for flex/grid layouts
- Apply responsive design with Tailwind breakpoints
- Use semantic color classes: `text-muted-foreground`, `bg-muted/50`

### Responsive Grid Layouts
For displaying calculated values, use this pattern:
```tsx
<div className="grid grid-cols-2 gap-4 text-sm">
  <div>
    <p className="text-muted-foreground">Label</p>
    <p className="font-medium">Value</p>
  </div>
</div>
```

### Number Formatting
- Use `toLocaleString()` for number formatting with commas
- Round monetary values: `Math.round(value).toLocaleString()`
- Display currency with `$` prefix

### Conditional Rendering
Use conditional rendering for progressive disclosure:
```tsx
{propertyPrice > 0 && (
  <div>
    {/* Conditional content */}
  </div>
)}
```

### Utility Class Patterns
- Background sections: `bg-muted/50 rounded-lg p-4`
- Borders and separators: `border-t pt-3`
- Text emphasis: `font-medium`, `font-bold`, `text-xl`
- Color hierarchy: `text-muted-foreground` for secondary text
