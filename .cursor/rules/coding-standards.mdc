---
description:
globs:
alwaysApply: false
---
# Coding Standards & Best Practices

## TypeScript Guidelines
- Use strict TypeScript configuration as defined in [tsconfig.json](mdc:tsconfig.json)
- Always use explicit types for function parameters and return values
- Use `type` for object shapes and `interface` for extensible contracts
- Prefer `React.ChangeEvent<HTMLInputElement>` for form event handlers
- Use optional chaining (`?.`) and nullish coalescing (`??`) when appropriate

## React & Next.js Conventions
- Use `'use client'` directive for client-side components that use hooks or browser APIs
- Prefer functional components with hooks over class components
- **Always use named exports** for all components, hooks, and utilities
- **Exception**: Next.js pages (`src/app/page.tsx`, `src/app/layout.tsx`) must use default exports (Next.js requirement)
- Follow the App Router structure: pages in `src/app/`, components in `src/components/`
- Use the `@/` path alias for imports (configured in [tsconfig.json](mdc:tsconfig.json))

## Component Structure
### Main Components
Follow the pattern established in [src/components/expense-calculator/expense-calculator.tsx](mdc:src/components/expense-calculator/expense-calculator.tsx):
1. Import statements (external libraries first, then local imports)
2. Component function with minimal logic (orchestration only)
3. Custom hook usage for business logic
4. JSX return with proper semantic structure

### Custom Hooks
Follow the pattern in [src/components/expense-calculator/use-expense-calculations.ts](mdc:src/components/expense-calculator/use-expense-calculations.ts):
1. Import statements
2. Constants and helper functions
3. Interface definitions
4. Hook function with TypeScript return type
5. State declarations
6. useEffect blocks for side effects
7. Utility functions (reset, etc.)
8. Return object with properly typed interface

## State Management
### Component-Level State
- Use `useState` for local component state
- Prefer custom hooks for complex business logic
- Always provide proper TypeScript types for state setters

### Custom Hooks for Business Logic
- Extract business logic into custom hooks (e.g., `useExpenseCalculations`)
- Use `useEffect` for side effects and computed values
- Return well-typed interfaces from custom hooks
- Handle localStorage operations within hooks, not components

### Shared Utilities
- Create reusable utility functions (e.g., `handleInputChange`, `handleInputBlur`)
- Place shared utilities in appropriate files (e.g., `input-utils.ts`)
- Use proper TypeScript types for utility functions

## Styling Guidelines
- Use Tailwind CSS classes exclusively (no custom CSS unless absolutely necessary)
- Follow responsive design patterns with Tailwind breakpoints
- Use component variants from [src/components/ui/](mdc:src/components/ui) components
- Prefer semantic class combinations over arbitrary values

## Form Handling
- **Always use controlled components** with `value` and `onChange` props
- Use `toLocaleString()` for displaying formatted numbers in inputs
- Implement proper input validation and formatting
- Use `onBlur` for final formatting after user stops typing
- Convert string inputs to numbers using `Number.parseFloat()` with fallback to 0
- Extract input handling into reusable utilities

## File Organization
### Feature-Based Organization
- Group related components in feature folders under `src/components/`
- Use `index.tsx` files for clean exports from feature folders
- Separate business logic into custom hooks
- Create utility files for shared functionality within features

### Naming Conventions
- **Feature folders**: kebab-case (e.g., `expense-calculator/`)
- **Component files**: PascalCase (e.g., `ExpenseResults.tsx`)
- **Hook files**: camelCase with `use` prefix (e.g., `use-expense-calculations.ts`)
- **Utility files**: kebab-case (e.g., `input-utils.ts`)

### Export Patterns
- **Always use named exports** - never use default exports
- Components: `export function ComponentName() {}`
- Hooks: `export function useHookName() {}`
- Utilities: `export const functionName = () => {}`
- Types/Interfaces: `export interface InterfaceName {}`
- Index files: Re-export with named exports: `export { ComponentName } from './component-name'`

## Performance Considerations
- Use `useEffect` dependencies arrays properly to prevent unnecessary re-renders
- Memoize expensive calculations when needed
- Avoid inline object/function creation in JSX when possible
