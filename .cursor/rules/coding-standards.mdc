---
description:
globs:
alwaysApply: false
---
# Coding Standards - Simple Expense Calculator

## TypeScript Standards

### Type Definitions
- Use `interface` for props and data structures
- Import types with `type` keyword: `import type React from 'react'`
- Define strict prop interfaces for all components
- Use React.Dispatch<React.SetStateAction<T>> for state setters

### Example Interface Pattern
```typescript
interface ComponentProps {
  value: number;
  setValue: React.Dispatch<React.SetStateAction<number>>;
  isLoading?: boolean; // Optional props with default values
}
```

### Function Components
- Use function declarations: `export function ComponentName() {}`
- Return JSX directly without unnecessary React.FC wrapper
- Destructure props in function parameters for clarity

## React Patterns

### Hooks Usage
- Custom hooks in [src/hooks/](mdc:src/hooks) directory
- Use `useState` and `useEffect` for component state
- Implement cleanup in useEffect when needed
- Debounce localStorage updates to improve performance

### State Management
- Centralize related state in custom hooks
- Pass state setters as props to child components
- Use derived state for calculations
- Implement reset functionality for form-like components

### Component Structure
```typescript
'use client'; // For client-side components

import { ComponentName } from '@/components/...';
import { hookName } from '@/hooks/...';

export function MyComponent() {
  const { state, setState } = hookName();

  return (
    <div className="...">
      {/* JSX content */}
    </div>
  );
}
```

## Import Organization

### Import Order (using Prettier plugin)
1. React and Next.js imports
2. Third-party libraries
3. Internal components (`@/components/...`)
4. Internal hooks (`@/hooks/...`)
5. Internal utilities (`@/lib/...`)
6. Type-only imports at the end

### Path Aliases
- Use `@/` for src directory: `@/components`, `@/hooks`, `@/lib`
- Relative imports only for same directory files

## Styling Standards

### Tailwind CSS
- Use utility classes for styling
- Follow responsive design patterns: `space-y-4 sm:space-y-6`
- Use semantic color tokens: `text-muted-foreground`, `bg-muted/50`
- Implement consistent spacing and sizing

### Component Variants
- Use [src/lib/utils.ts](mdc:src/lib/utils.ts) `cn()` function for conditional classes
- Follow shadcn/ui conventions for component styling
- Maintain consistent visual hierarchy

## File Naming

### Conventions
- Use kebab-case for file names: `expense-calculator.tsx`
- Match component name to file name
- Use `index.tsx` for directory exports
- Hook files: `use-[name].ts`

### Directory Structure
- Components grouped by feature in subdirectories
- Separate UI components from business logic components
- Hooks and utilities in dedicated directories

## Error Handling

### Input Validation
- Use [src/lib/input-utils.ts](mdc:src/lib/input-utils.ts) for number input handling
- Implement graceful fallbacks for invalid inputs
- Handle localStorage errors silently

### Calculation Safety
- Check for zero values before mathematical operations
- Provide sensible defaults for empty states
- Use optional chaining and nullish coalescing where appropriate

## Performance Considerations

### useEffect Dependencies
- Include all used variables in dependency arrays
- Use debouncing for expensive operations (localStorage writes)
- Implement cleanup functions for timers and subscriptions

### Conditional Rendering
- Use early returns for complex conditions
- Implement loading states where appropriate
- Optimize re-renders with proper dependency management

## Code Formatting

### Prettier Configuration
- 2-space indentation
- Single quotes for strings
- Trailing commas where valid
- Line length limit enforced

### ESLint Rules
- Follow Next.js recommended configuration
- Enforce TypeScript strict mode
- Maintain consistent code style across the project

## Documentation

### Component Documentation
- Use descriptive prop names and interfaces
- Include JSDoc comments for complex functions
- Maintain up-to-date README with usage examples

### Code Comments
- Explain calculation formulas and business logic
- Document non-obvious implementation decisions
- Keep comments concise and relevant
